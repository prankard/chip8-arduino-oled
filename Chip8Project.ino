#include "Gamepad.h"
#include "MemoryHeap.h"
#include "ArdulibRenderer.h"
#include "DigitalPin.h"
#include "Chip8.h"
//#include "LiquidCrystalRenderer.h"
//#include "LogRenderer.h"
//#include "AdafruitRenderer.h"

// IBM
const byte IBM[150] = { 0x00 ,0xE0 ,0xA2 ,0x2A ,0x60 ,0x0C ,0x61 ,0x08 ,0xD0 ,0x1F ,0x70 ,0x09 ,0xA2 ,0x39 ,0xD0 ,0x1F ,0xA2 ,0x48 ,0x70 ,0x08 ,0xD0 ,0x1F ,0x70 ,0x04 ,0xA2 ,0x57 ,0xD0 ,0x1F ,0x70 ,0x08 ,0xA2 ,0x66 ,0xD0 ,0x1F ,0x70 ,0x08 ,0xA2 ,0x75 ,0xD0 ,0x1F ,0x12 ,0x28 ,0xFF ,0x00 ,0xFF ,0x00 ,0x3C ,0x00 ,0x3C ,0x00 ,0x3C ,0x00 ,0x3C ,0x00 ,0xFF ,0x00 ,0xFF ,0xFF ,0x00 ,0xFF ,0x00 ,0x38 ,0x00 ,0x3F ,0x00 ,0x3F ,0x00 ,0x38 ,0x00 ,0xFF ,0x00 ,0xFF ,0x80 ,0x00 ,0xE0 ,0x00 ,0xE0 ,0x00 ,0x80 ,0x00 ,0x80 ,0x00 ,0xE0 ,0x00 ,0xE0 ,0x00 ,0x80 ,0xF8 ,0x00 ,0xFC ,0x00 ,0x3E ,0x00 ,0x3F ,0x00 ,0x3B ,0x00 ,0x39 ,0x00 ,0xF8 ,0x00 ,0xF8 ,0x03 ,0x00 ,0x07 ,0x00 ,0x0F ,0x00 ,0xBF ,0x00 ,0xFB ,0x00 ,0xF3 ,0x00 ,0xE3 ,0x00 ,0x43 ,0xE0 ,0x00 ,0xE0 ,0x00 ,0x80 ,0x00 ,0x80 ,0x00 ,0x80 ,0x00 ,0x80 ,0x00 ,0xE0 ,0x00, 0xE0 };
// Maze
const byte MAZE[64] = { 0xA2 ,0x1E ,0xC2 ,0x01 ,0x32 ,0x01 ,0xA2 ,0x1A ,0xD0 ,0x14 ,0x70 ,0x04 ,0x30 ,0x40 ,0x12 ,0x00 ,0x60 ,0x00 ,0x71 ,0x04 ,0x31 ,0x20 ,0x12 ,0x00 ,0x12 ,0x18 ,0x80 ,0x40 ,0x20 ,0x10 ,0x20 ,0x40 ,0x80 ,0x10 };
// 15 puzzle
const byte PUZZLE[384] = { 0x00, 0xe0, 0x6c, 0x00, 0x4c, 0x00, 0x6e, 0x0f, 0xa2, 0x03, 0x60, 0x20, 0xf0, 0x55, 0x00, 0xe0, 0x22, 0xbe, 0x22, 0x76, 0x22, 0x8e, 0x22, 0x5e, 0x22, 0x46, 0x12, 0x10, 0x61, 0x00, 0x62, 0x17, 0x63, 0x04, 0x41, 0x10, 0x00, 0xee, 0xa2, 0xe8, 0xf1, 0x1e, 0xf0, 0x65, 0x40, 0x00, 0x12, 0x34, 0xf0, 0x29, 0xd2, 0x35, 0x71, 0x01, 0x72, 0x05, 0x64, 0x03, 0x84, 0x12, 0x34, 0x00, 0x12, 0x22, 0x62, 0x17, 0x73, 0x06, 0x12, 0x22, 0x64, 0x03, 0x84, 0xe2, 0x65, 0x03, 0x85, 0xd2, 0x94, 0x50, 0x00, 0xee, 0x44, 0x03, 0x00, 0xee, 0x64, 0x01, 0x84, 0xe4, 0x22, 0xa6, 0x12, 0x46, 0x64, 0x03, 0x84, 0xe2, 0x65, 0x03, 0x85, 0xd2, 0x94, 0x50, 0x00, 0xee, 0x44, 0x00, 0x00, 0xee, 0x64, 0xff, 0x84, 0xe4, 0x22, 0xa6, 0x12, 0x5e, 0x64, 0x0c, 0x84, 0xe2, 0x65, 0x0c, 0x85, 0xd2, 0x94, 0x50, 0x00, 0xee, 0x44, 0x00, 0x00, 0xee, 0x64, 0xfc, 0x84, 0xe4, 0x22, 0xa6, 0x12, 0x76, 0x64, 0x0c, 0x84, 0xe2, 0x65, 0x0c, 0x85, 0xd2, 0x94, 0x50, 0x00, 0xee, 0x44, 0x0c, 0x00, 0xee, 0x64, 0x04, 0x84, 0xe4, 0x22, 0xa6, 0x12, 0x8e, 0xa2, 0xe8, 0xf4, 0x1e, 0xf0, 0x65, 0xa2, 0xe8, 0xfe, 0x1e, 0xf0, 0x55, 0x60, 0x00, 0xa2, 0xe8, 0xf4, 0x1e, 0xf0, 0x55, 0x8e, 0x40, 0x00, 0xee, 0x3c, 0x00, 0x12, 0xd2, 0x22, 0x1c, 0x22, 0xd8, 0x22, 0x1c, 0xa2, 0xf8, 0xfd, 0x1e, 0xf0, 0x65, 0x8d, 0x00, 0x00, 0xee, 0x7c, 0xff, 0xcd, 0x0f, 0x00, 0xee, 0x7d, 0x01, 0x60, 0x0f, 0x8d, 0x02, 0xed, 0x9e, 0x12, 0xd8, 0xed, 0xa1, 0x12, 0xe2, 0x00, 0xee, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x0d, 0x00, 0x01, 0x02, 0x04, 0x05, 0x06, 0x08, 0x09, 0x0a, 0x0c, 0x0e, 0x03, 0x07, 0x0b, 0x0f, 0x84, 0xe4, 0x22, 0xa6, 0x12, 0x76, 0x64, 0x0c, 0x84, 0xe2, 0x65, 0x0c, 0x85, 0xd2, 0x94, 0x50, 0x00, 0xee, 0x44, 0x0c, 0x00, 0xee, 0x64, 0x04, 0x84, 0xe4, 0x22, 0xa6, 0x12, 0x8e, 0xa2, 0xe8, 0xf4, 0x1e, 0xf0, 0x65, 0xa2, 0xe8, 0xfe, 0x1e, 0xf0, 0x55, 0x60, 0x00, 0xa2, 0xe8, 0xf4, 0x1e, 0xf0, 0x55, 0x8e, 0x40, 0x00, 0xee, 0x3c, 0x00, 0x12, 0xd2, 0x22, 0x1c, 0x22, 0xd8, 0x22, 0x1c, 0xa2, 0xf8, 0xfd, 0x1e, 0xf0, 0x65, 0x8d, 0x00, 0x00, 0xee, 0x7c, 0xff, 0xcd, 0x0f, 0x00, 0xee, 0x7d, 0x01, 0x60, 0x0f, 0x8d, 0x02, 0xed, 0x9e, 0x12, 0xd8, 0xed, 0xa1, 0x12, 0xe2, 0x00, 0xee, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x0d, 0x00, 0x01, 0x02, 0x04, 0x05, 0x06, 0x08 };
// Pong
const byte PONG[246] = { 0x6a, 0x02, 0x6b, 0x0c, 0x6c, 0x3f, 0x6d, 0x0c, 0xa2, 0xea, 0xda, 0xb6, 0xdc, 0xd6, 0x6e, 0x00, 0x22, 0xd4, 0x66, 0x03, 0x68, 0x02, 0x60, 0x60, 0xf0, 0x15, 0xf0, 0x07, 0x30, 0x00, 0x12, 0x1a, 0xc7, 0x17, 0x77, 0x08, 0x69, 0xff, 0xa2, 0xf0, 0xd6, 0x71, 0xa2, 0xea, 0xda, 0xb6, 0xdc, 0xd6, 0x60, 0x01, 0xe0, 0xa1, 0x7b, 0xfe, 0x60, 0x04, 0xe0, 0xa1, 0x7b, 0x02, 0x60, 0x1f, 0x8b, 0x02, 0xda, 0xb6, 0x60, 0x0c, 0xe0, 0xa1, 0x7d, 0xfe, 0x60, 0x0d, 0xe0, 0xa1, 0x7d, 0x02, 0x60, 0x1f, 0x8d, 0x02, 0xdc, 0xd6, 0xa2, 0xf0, 0xd6, 0x71, 0x86, 0x84, 0x87, 0x94, 0x60, 0x3f, 0x86, 0x02, 0x61, 0x1f, 0x87, 0x12, 0x46, 0x02, 0x12, 0x78, 0x46, 0x3f, 0x12, 0x82, 0x47, 0x1f, 0x69, 0xff, 0x47, 0x00, 0x69, 0x01, 0xd6, 0x71, 0x12, 0x2a, 0x68, 0x02, 0x63, 0x01, 0x80, 0x70, 0x80, 0xb5, 0x12, 0x8a, 0x68, 0xfe, 0x63, 0x0a, 0x80, 0x70, 0x80, 0xd5, 0x3f, 0x01, 0x12, 0xa2, 0x61, 0x02, 0x80, 0x15, 0x3f, 0x01, 0x12, 0xba, 0x80, 0x15, 0x3f, 0x01, 0x12, 0xc8, 0x80, 0x15, 0x3f, 0x01, 0x12, 0xc2, 0x60, 0x20, 0xf0, 0x18, 0x22, 0xd4, 0x8e, 0x34, 0x22, 0xd4, 0x66, 0x3e, 0x33, 0x01, 0x66, 0x03, 0x68, 0xfe, 0x33, 0x01, 0x68, 0x02, 0x12, 0x16, 0x79, 0xff, 0x49, 0xfe, 0x69, 0xff, 0x12, 0xc8, 0x79, 0x01, 0x49, 0x02, 0x69, 0x01, 0x60, 0x04, 0xf0, 0x18, 0x76, 0x01, 0x46, 0x40, 0x76, 0xfe, 0x12, 0x6c, 0xa2, 0xf2, 0xfe, 0x33, 0xf2, 0x65, 0xf1, 0x29, 0x64, 0x14, 0x65, 0x00, 0xd4, 0x55, 0x74, 0x15, 0xf2, 0x29, 0xd4, 0x55, 0x00, 0xee, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00 };
// Guess
const byte GUESS[148] = { 0x6e, 0x01, 0x00, 0xe0, 0x6d, 0x01, 0x6a, 0x01, 0x6b, 0x01, 0x8c, 0xd0, 0x8c, 0xe2, 0x4c, 0x00, 0x12, 0x20, 0x88, 0xd0, 0x22, 0x3e, 0x3a, 0x40, 0x12, 0x20, 0x6a, 0x01, 0x7b, 0x06, 0x3c, 0x3f, 0x7d, 0x01, 0x3d, 0x3f, 0x12, 0x0a, 0xf0, 0x0a, 0x40, 0x05, 0x89, 0xe4, 0x8e, 0xe4, 0x3e, 0x40, 0x12, 0x02, 0x6a, 0x1c, 0x6b, 0x0d, 0x88, 0x90, 0x00, 0xe0, 0x22, 0x3e, 0x12, 0x3c, 0xa2, 0x94, 0xf8, 0x33, 0xf2, 0x65, 0x22, 0x54, 0xda, 0xb5, 0x7a, 0x04, 0x81, 0x20, 0x22, 0x54, 0xda, 0xb5, 0x7a, 0x05, 0x00, 0xee, 0x83, 0x10, 0x83, 0x34, 0x83, 0x34, 0x83, 0x14, 0xa2, 0x62, 0xf3, 0x1e, 0x00, 0xee, 0xe0, 0xa0, 0xa0, 0xa0, 0xe0, 0x40, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x20, 0xe0, 0x80, 0xe0, 0xe0, 0x20, 0xe0, 0x20, 0xe0, 0xa0, 0xa0, 0xe0, 0x20, 0x20, 0xe0, 0x80, 0xe0, 0x20, 0xe0, 0xe0, 0x80, 0xe0, 0xa0, 0xe0, 0xe0, 0x20, 0x20, 0x20, 0x20, 0xe0, 0xa0, 0xe0, 0xa0, 0xe0, 0xe0, 0xa0, 0xe0, 0x20, 0xe0 };
// Tetris
const byte TETRIS[494] = { 0xa2, 0xb4, 0x23, 0xe6, 0x22, 0xb6, 0x70, 0x01, 0xd0, 0x11, 0x30, 0x25, 0x12, 0x06, 0x71, 0xff, 0xd0, 0x11, 0x60, 0x1a, 0xd0, 0x11, 0x60, 0x25, 0x31, 0x00, 0x12, 0x0e, 0xc4, 0x70, 0x44, 0x70, 0x12, 0x1c, 0xc3, 0x03, 0x60, 0x1e, 0x61, 0x03, 0x22, 0x5c, 0xf5, 0x15, 0xd0, 0x14, 0x3f, 0x01, 0x12, 0x3c, 0xd0, 0x14, 0x71, 0xff, 0xd0, 0x14, 0x23, 0x40, 0x12, 0x1c, 0xe7, 0xa1, 0x22, 0x72, 0xe8, 0xa1, 0x22, 0x84, 0xe9, 0xa1, 0x22, 0x96, 0xe2, 0x9e, 0x12, 0x50, 0x66, 0x00, 0xf6, 0x15, 0xf6, 0x07, 0x36, 0x00, 0x12, 0x3c, 0xd0, 0x14, 0x71, 0x01, 0x12, 0x2a, 0xa2, 0xc4, 0xf4, 0x1e, 0x66, 0x00, 0x43, 0x01, 0x66, 0x04, 0x43, 0x02, 0x66, 0x08, 0x43, 0x03, 0x66, 0x0c, 0xf6, 0x1e, 0x00, 0xee, 0xd0, 0x14, 0x70, 0xff, 0x23, 0x34, 0x3f, 0x01, 0x00, 0xee, 0xd0, 0x14, 0x70, 0x01, 0x23, 0x34, 0x00, 0xee, 0xd0, 0x14, 0x70, 0x01, 0x23, 0x34, 0x3f, 0x01, 0x00, 0xee, 0xd0, 0x14, 0x70, 0xff, 0x23, 0x34, 0x00, 0xee, 0xd0, 0x14, 0x73, 0x01, 0x43, 0x04, 0x63, 0x00, 0x22, 0x5c, 0x23, 0x34, 0x3f, 0x01, 0x00, 0xee, 0xd0, 0x14, 0x73, 0xff, 0x43, 0xff, 0x63, 0x03, 0x22, 0x5c, 0x23, 0x34, 0x00, 0xee, 0x80, 0x00, 0x67, 0x05, 0x68, 0x06, 0x69, 0x04, 0x61, 0x1f, 0x65, 0x10, 0x62, 0x07, 0x00, 0xee, 0x40, 0xe0, 0x00, 0x00, 0x40, 0xc0, 0x40, 0x00, 0x00, 0xe0, 0x40, 0x00, 0x40, 0x60, 0x40, 0x00, 0x40, 0x40, 0x60, 0x00, 0x20, 0xe0, 0x00, 0x00, 0xc0, 0x40, 0x40, 0x00, 0x00, 0xe0, 0x80, 0x00, 0x40, 0x40, 0xc0, 0x00, 0x00, 0xe0, 0x20, 0x00, 0x60, 0x40, 0x40, 0x00, 0x80, 0xe0, 0x00, 0x00, 0x40, 0xc0, 0x80, 0x00, 0xc0, 0x60, 0x00, 0x00, 0x40, 0xc0, 0x80, 0x00, 0xc0, 0x60, 0x00, 0x00, 0x80, 0xc0, 0x40, 0x00, 0x00, 0x60, 0xc0, 0x00, 0x80, 0xc0, 0x40, 0x00, 0x00, 0x60, 0xc0, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0xf0, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0xf0, 0x00, 0x00, 0xd0, 0x14, 0x66, 0x35, 0x76, 0xff, 0x36, 0x00, 0x13, 0x38, 0x00, 0xee, 0xa2, 0xb4, 0x8c, 0x10, 0x3c, 0x1e, 0x7c, 0x01, 0x3c, 0x1e, 0x7c, 0x01, 0x3c, 0x1e, 0x7c, 0x01, 0x23, 0x5e, 0x4b, 0x0a, 0x23, 0x72, 0x91, 0xc0, 0x00, 0xee, 0x71, 0x01, 0x13, 0x50, 0x60, 0x1b, 0x6b, 0x00, 0xd0, 0x11, 0x3f, 0x00, 0x7b, 0x01, 0xd0, 0x11, 0x70, 0x01, 0x30, 0x25, 0x13, 0x62, 0x00, 0xee, 0x60, 0x1b, 0xd0, 0x11, 0x70, 0x01, 0x30, 0x25, 0x13, 0x74, 0x8e, 0x10, 0x8d, 0xe0, 0x7e, 0xff, 0x60, 0x1b, 0x6b, 0x00, 0xd0, 0xe1, 0x3f, 0x00, 0x13, 0x90, 0xd0, 0xe1, 0x13, 0x94, 0xd0, 0xd1, 0x7b, 0x01, 0x70, 0x01, 0x30, 0x25, 0x13, 0x86, 0x4b, 0x00, 0x13, 0xa6, 0x7d, 0xff, 0x7e, 0xff, 0x3d, 0x01, 0x13, 0x82, 0x23, 0xc0, 0x3f, 0x01, 0x23, 0xc0, 0x7a, 0x01, 0x23, 0xc0, 0x80, 0xa0, 0x6d, 0x07, 0x80, 0xd2, 0x40, 0x04, 0x75, 0xfe, 0x45, 0x02, 0x65, 0x04, 0x00, 0xee, 0xa7, 0x00, 0xf2, 0x55, 0xa8, 0x04, 0xfa, 0x33, 0xf2, 0x65, 0xf0, 0x29, 0x6d, 0x32, 0x6e, 0x00, 0xdd, 0xe5, 0x7d, 0x05, 0xf1, 0x29, 0xdd, 0xe5, 0x7d, 0x05, 0xf2, 0x29, 0xdd, 0xe5, 0xa7, 0x00, 0xf2, 0x65, 0xa2, 0xb4, 0x00, 0xee, 0x6a, 0x00, 0x60, 0x19, 0x00, 0xee, 0x37, 0x23 };
// Cave
const byte CAVE[882] = { 0x00, 0xe0, 0x64, 0x00, 0x65, 0x00, 0xa2, 0x0a, 0x12, 0x0c, 0xcc, 0x33, 0x66, 0x1e, 0xd4, 0x52, 0xd4, 0x62, 0x74, 0x08, 0x44, 0x40, 0x12, 0x1a, 0x12, 0x0e, 0xa2, 0x1e, 0x12, 0x2c, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xff, 0xff, 0x64, 0x0d, 0x65, 0x09, 0xd4, 0x5e, 0x74, 0x0a, 0xa2, 0x3a, 0xd4, 0x5e, 0x12, 0x48, 0xff, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x74, 0x0a, 0xa2, 0x50, 0xd4, 0x5e, 0x12, 0x5e, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x3c, 0x18, 0x18, 0x74, 0x0a, 0xa2, 0x66, 0xd4, 0x5e, 0x12, 0x74, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xff, 0xff, 0x6a, 0x01, 0x6b, 0x04, 0x6c, 0x0e, 0x6d, 0x00, 0xa2, 0x81, 0x12, 0xa6, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xe0, 0x64, 0x00, 0x65, 0x00, 0xd4, 0x58, 0x74, 0x08, 0x44, 0x40, 0x22, 0x9e, 0x45, 0x20, 0x12, 0xa4, 0x12, 0x90, 0x64, 0x00, 0x75, 0x08, 0x00, 0xee, 0x12, 0xae, 0x60, 0x0f, 0xe0, 0x9e, 0x12, 0xa8, 0x12, 0x8a, 0x4a, 0x01, 0x22, 0xd0, 0x4a, 0x02, 0x23, 0x8a, 0x4a, 0x03, 0x23, 0xb8, 0x4a, 0x04, 0x23, 0xe0, 0x4a, 0x05, 0x24, 0x18, 0x4a, 0x06, 0x24, 0x78, 0x4a, 0x07, 0x24, 0xe6, 0x4a, 0x08, 0x25, 0x10, 0x13, 0x18, 0xa2, 0x81, 0x64, 0x02, 0x65, 0x02, 0xd4, 0x58, 0x65, 0x0a, 0xd4, 0x58, 0x65, 0x12, 0xd4, 0x58, 0x64, 0x0a, 0x65, 0x05, 0xd4, 0x53, 0x64, 0x12, 0xd4, 0x53, 0x64, 0x1a, 0xd4, 0x53, 0x64, 0x22, 0xd4, 0x53, 0x64, 0x2a, 0xd4, 0x53, 0x64, 0x32, 0xd4, 0x53, 0xa2, 0xfe, 0x13, 0x0a, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x75, 0x03, 0x74, 0x02, 0xd4, 0x5c, 0x74, 0x06, 0x75, 0x09, 0xd4, 0x53, 0x00, 0xee, 0xa2, 0x80, 0xdb, 0xc1, 0x4f, 0x01, 0x13, 0x72, 0x60, 0x02, 0xe0, 0xa1, 0x6d, 0x02, 0x60, 0x04, 0xe0, 0xa1, 0x6d, 0x04, 0x60, 0x06, 0xe0, 0xa1, 0x6d, 0x06, 0x60, 0x08, 0xe0, 0xa1, 0x6d, 0x08, 0xdb, 0xc1, 0x4d, 0x02, 0x7c, 0xff, 0x4d, 0x04, 0x7b, 0xff, 0x4d, 0x06, 0x7b, 0x01, 0x4d, 0x08, 0x7c, 0x01, 0x4b, 0x40, 0x13, 0x5e, 0x4b, 0xff, 0x13, 0x64, 0x60, 0x02, 0xf0, 0x15, 0xf0, 0x07, 0x30, 0x00, 0x13, 0x56, 0x13, 0x18, 0x7a, 0x01, 0x4a, 0x09, 0x15, 0x3a, 0x6b, 0x01, 0xa2, 0x81, 0x12, 0x8a, 0x7a, 0xff, 0x6b, 0x3e, 0xa2, 0x81, 0x12, 0x8a, 0x60, 0x03, 0xf0, 0x18, 0x60, 0x0f, 0xe0, 0x9e, 0x13, 0x78, 0x6a, 0x01, 0x6b, 0x04, 0x6c, 0x0e, 0x6d, 0x00, 0xa2, 0x81, 0x00, 0xe0, 0x12, 0x8a, 0x64, 0x00, 0x65, 0x11, 0xa2, 0x81, 0xd4, 0x53, 0x74, 0x08, 0xd4, 0x53, 0x74, 0x08, 0x75, 0xff, 0xd4, 0x53, 0x74, 0x08, 0x75, 0xff, 0xd4, 0x53, 0x74, 0x08, 0xd4, 0x53, 0x74, 0x08, 0xd4, 0x53, 0x74, 0x08, 0x75, 0x01, 0xd4, 0x53, 0x74, 0x08, 0x75, 0x01, 0xd4, 0x53, 0x00, 0xee, 0x64, 0x00, 0x65, 0x11, 0xa2, 0x81, 0xd4, 0x53, 0x74, 0x08, 0xd4, 0x53, 0x74, 0x08, 0x75, 0x02, 0xd4, 0x52, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x00, 0xee, 0x64, 0x00, 0x65, 0x13, 0xa2, 0x81, 0xd4, 0x51, 0xa2, 0x80, 0x74, 0x08, 0xd4, 0x51, 0x75, 0x01, 0xd4, 0x51, 0x75, 0x01, 0xa2, 0x81, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x52, 0x74, 0x08, 0x75, 0xff, 0xd4, 0x53, 0x74, 0x08, 0xd4, 0x54, 0x74, 0x08, 0x75, 0xff, 0xd4, 0x56, 0x74, 0x08, 0x75, 0xff, 0xd4, 0x58, 0x00, 0xee, 0x64, 0x00, 0x65, 0x12, 0xa2, 0x81, 0xd4, 0x58, 0x74, 0x08, 0xd4, 0x58, 0x74, 0x08, 0xd4, 0x58, 0x74, 0x08, 0xd4, 0x58, 0x74, 0x08, 0xd4, 0x58, 0x74, 0x08, 0xd4, 0x58, 0x74, 0x08, 0xd4, 0x58, 0xa2, 0x80, 0x75, 0xff, 0x74, 0x20, 0xd4, 0x51, 0x75, 0xff, 0xd4, 0x51, 0x75, 0xff, 0xd4, 0x51, 0x75, 0xff, 0xd4, 0x51, 0x75, 0xff, 0xd4, 0x51, 0x75, 0xff, 0xd4, 0x51, 0x75, 0xff, 0xd4, 0x51, 0x75, 0xff, 0xd4, 0x51, 0x75, 0xff, 0xa2, 0x81, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x00, 0xee, 0x64, 0x00, 0x65, 0x09, 0xa2, 0x81, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0xa2, 0x80, 0x75, 0x01, 0xd4, 0x51, 0x75, 0x01, 0xd4, 0x51, 0x75, 0x01, 0xd4, 0x51, 0x75, 0x01, 0xd4, 0x51, 0x75, 0x01, 0xd4, 0x51, 0x75, 0x01, 0xd4, 0x51, 0x75, 0x01, 0xd4, 0x51, 0x75, 0x01, 0xd4, 0x51, 0x75, 0x01, 0xd4, 0x51, 0x75, 0x01, 0xd4, 0x51, 0x75, 0x01, 0xd4, 0x51, 0x75, 0x01, 0xd4, 0x51, 0x75, 0x01, 0xd4, 0x51, 0x75, 0x01, 0xd4, 0x51, 0x75, 0x01, 0xd4, 0x51, 0x75, 0x01, 0xd4, 0x51, 0x75, 0x01, 0xa2, 0x81, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x00, 0xee, 0x64, 0x00, 0x65, 0x1a, 0xa2, 0x81, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x75, 0xff, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x00, 0xee, 0x64, 0x00, 0x65, 0x19, 0xa2, 0x81, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x75, 0xff, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x74, 0x08, 0xd4, 0x51, 0x00, 0xee, 0x00, 0xe0, 0x67, 0x03, 0x68, 0x03, 0xa5, 0x44, 0x15, 0x5c, 0xae, 0xaa, 0xea, 0x4a, 0x4e, 0x00, 0xa4, 0xa4, 0xa4, 0xa5, 0xe2, 0x00, 0x5d, 0x55, 0x55, 0x55, 0x9d, 0x00, 0xc8, 0x48, 0x48, 0x40, 0x48, 0x00, 0xd7, 0x85, 0xa5, 0x4a, 0x77, 0x08, 0xd7, 0x85, 0x77, 0x08, 0xa5, 0x50, 0xd7, 0x85, 0x77, 0x08, 0xa5, 0x56, 0xd7, 0x85, 0x15, 0x70 };
// Missile
const byte MISSILE[180] = { 0x12, 0x19, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4c, 0x45, 0x20, 0x62, 0x79, 0x20, 0x44, 0x61, 0x76, 0x69, 0x64, 0x20, 0x57, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x6c, 0x0c, 0x60, 0x00, 0x61, 0x00, 0x65, 0x08, 0x66, 0x0a, 0x67, 0x00, 0x6e, 0x01, 0xa2, 0xad, 0xd0, 0x14, 0x70, 0x08, 0x30, 0x40, 0x12, 0x29, 0x60, 0x00, 0x61, 0x1c, 0xa2, 0xb0, 0xd0, 0x14, 0xa2, 0xb0, 0xd0, 0x14, 0x3e, 0x01, 0x12, 0x49, 0x70, 0x04, 0x40, 0x38, 0x6e, 0x00, 0x12, 0x4f, 0x70, 0xfc, 0x40, 0x00, 0x6e, 0x01, 0xd0, 0x14, 0xfc, 0x15, 0xfb, 0x07, 0x3b, 0x00, 0x12, 0x53, 0x62, 0x08, 0xe2, 0x9e, 0x12, 0x95, 0x3c, 0x00, 0x7c, 0xfe, 0x63, 0x1b, 0x82, 0x00, 0xa2, 0xb0, 0xd2, 0x31, 0x64, 0x00, 0xd2, 0x31, 0x73, 0xff, 0xd2, 0x31, 0x3f, 0x00, 0x64, 0x01, 0x33, 0x03, 0x12, 0x6d, 0xd2, 0x31, 0x34, 0x01, 0x12, 0x91, 0x77, 0x05, 0x75, 0xff, 0x82, 0x00, 0x63, 0x00, 0xa2, 0xad, 0xd2, 0x34, 0x45, 0x00, 0x12, 0x97, 0x76, 0xff, 0x36, 0x00, 0x12, 0x39, 0xa2, 0xb4, 0xf7, 0x33, 0xf2, 0x65, 0x63, 0x1b, 0x64, 0x0d, 0xf1, 0x29, 0xd3, 0x45, 0x73, 0x05, 0xf2, 0x29, 0xd3, 0x45, 0x12, 0xab, 0x10, 0x38, 0x38, 0x10, 0x38, 0x7c, 0xfe };
// Brix
const byte BRIX[280] = { 0x6e, 0x05, 0x65, 0x00, 0x6b, 0x06, 0x6a, 0x00, 0xa3, 0x0c, 0xda, 0xb1, 0x7a, 0x04, 0x3a, 0x40, 0x12, 0x08, 0x7b, 0x02, 0x3b, 0x12, 0x12, 0x06, 0x6c, 0x20, 0x6d, 0x1f, 0xa3, 0x10, 0xdc, 0xd1, 0x22, 0xf6, 0x60, 0x00, 0x61, 0x00, 0xa3, 0x12, 0xd0, 0x11, 0x70, 0x08, 0xa3, 0x0e, 0xd0, 0x11, 0x60, 0x40, 0xf0, 0x15, 0xf0, 0x07, 0x30, 0x00, 0x12, 0x34, 0xc6, 0x0f, 0x67, 0x1e, 0x68, 0x01, 0x69, 0xff, 0xa3, 0x0e, 0xd6, 0x71, 0xa3, 0x10, 0xdc, 0xd1, 0x60, 0x04, 0xe0, 0xa1, 0x7c, 0xfe, 0x60, 0x06, 0xe0, 0xa1, 0x7c, 0x02, 0x60, 0x3f, 0x8c, 0x02, 0xdc, 0xd1, 0xa3, 0x0e, 0xd6, 0x71, 0x86, 0x84, 0x87, 0x94, 0x60, 0x3f, 0x86, 0x02, 0x61, 0x1f, 0x87, 0x12, 0x47, 0x1f, 0x12, 0xac, 0x46, 0x00, 0x68, 0x01, 0x46, 0x3f, 0x68, 0xff, 0x47, 0x00, 0x69, 0x01, 0xd6, 0x71, 0x3f, 0x01, 0x12, 0xaa, 0x47, 0x1f, 0x12, 0xaa, 0x60, 0x05, 0x80, 0x75, 0x3f, 0x00, 0x12, 0xaa, 0x60, 0x01, 0xf0, 0x18, 0x80, 0x60, 0x61, 0xfc, 0x80, 0x12, 0xa3, 0x0c, 0xd0, 0x71, 0x60, 0xfe, 0x89, 0x03, 0x22, 0xf6, 0x75, 0x01, 0x22, 0xf6, 0x45, 0x60, 0x12, 0xde, 0x12, 0x46, 0x69, 0xff, 0x80, 0x60, 0x80, 0xc5, 0x3f, 0x01, 0x12, 0xca, 0x61, 0x02, 0x80, 0x15, 0x3f, 0x01, 0x12, 0xe0, 0x80, 0x15, 0x3f, 0x01, 0x12, 0xee, 0x80, 0x15, 0x3f, 0x01, 0x12, 0xe8, 0x60, 0x20, 0xf0, 0x18, 0xa3, 0x0e, 0x7e, 0xff, 0x80, 0xe0, 0x80, 0x04, 0x61, 0x00, 0xd0, 0x11, 0x3e, 0x00, 0x12, 0x30, 0x12, 0xde, 0x78, 0xff, 0x48, 0xfe, 0x68, 0xff, 0x12, 0xee, 0x78, 0x01, 0x48, 0x02, 0x68, 0x01, 0x60, 0x04, 0xf0, 0x18, 0x69, 0xff, 0x12, 0x70, 0xa3, 0x14, 0xf5, 0x33, 0xf2, 0x65, 0xf1, 0x29, 0x63, 0x37, 0x64, 0x00, 0xd3, 0x45, 0x73, 0x05, 0xf2, 0x29, 0xd3, 0x45, 0x00, 0xee, 0xe0, 0x00, 0x80, 0x00, 0xfc, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00 };
// Chip8 Picture
const byte CHIP_8_PIC[164] = { 0x00, 0xe0, 0xa2, 0x48, 0x60, 0x00, 0x61, 0x1e, 0x62, 0x00, 0xd2, 0x02, 0xd2, 0x12, 0x72, 0x08, 0x32, 0x40, 0x12, 0x0a, 0x60, 0x00, 0x61, 0x3e, 0x62, 0x02, 0xa2, 0x4a, 0xd0, 0x2e, 0xd1, 0x2e, 0x72, 0x0e, 0xd0, 0x2e, 0xd1, 0x2e, 0xa2, 0x58, 0x60, 0x0b, 0x61, 0x08, 0xd0, 0x1f, 0x70, 0x0a, 0xa2, 0x67, 0xd0, 0x1f, 0x70, 0x0a, 0xa2, 0x76, 0xd0, 0x1f, 0x70, 0x03, 0xa2, 0x85, 0xd0, 0x1f, 0x70, 0x0a, 0xa2, 0x94, 0xd0, 0x1f, 0x12, 0x46, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xff, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xff, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xff, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xff, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xff, 0xff };


Chip8 chip;
//LiquidCrystalRenderer renderer(12, 11, 5, 4, 3, 2);
//AdafruitRenderer renderer(0x3C);
//LogRenderer renderer(9600);
ArdulibRenderer renderer;
Gamepad gamepad;

unsigned long lastTime;

void setup()
{
	Serial.begin(9600);
	Serial.println("Hello log");
	renderer.setup();
	chip.gamepad = &gamepad;
	chip.loadRom(BRIX, 0);
	chip.renderer = &renderer;
	chip.setup();
}

unsigned int counter = 0;

void loop() 
{
	int time = millis();
	for (int i = 0; i < 1000; i++)
	{
		chip.step();
	}
	if (!chip.end)
		Serial.println(millis() - time);

	/*
	// put your main code here, to run repeatedly:
	if (lastTime != 0)
	{
		unsigned int diff = millis() - lastTime;
//		if (diff > 0)
//			Serial.println(diff);
		while (diff-- != 0)
		{
			counter++;
			chip.step();
		}


		if (chip.drawFlag)
		{
			//renderer.render(chip.displayBytes, chip.displayWidth, chip.displayHeight);
			chip.drawFlag = false;
		}
	}

	lastTime = millis();
	//*/
}
